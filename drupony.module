<?php

use Drupony\Drupony;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Debug\Debug;

/**
 * Implements hook_boot().
 */
function drupony_boot() {
  if (variable_get('drupony_debug', FALSE) && variable_get('drupony_error_handler', TRUE)) {
    drupony_autoload();
    Debug::enable();
  }
}

/**
 * Implements hook_hook_info().
 */
function drupony_hook_info() {
  $hooks = array();
  $hooks['flush_caches'] =
  $hooks['admin_menu_cache_info'] = array('group' => 'hooks');
  return $hooks;
}

/**
 * Tries to include the autoloader.
 * @see _drupony_find_composer_autoloader_dir().
 * No-op if it was already included or our main class exists (external autoloader)
 *
 * @throws RuntimeException If our main class and autoloader don't exist.
 */
function drupony_autoload() {
  static $loaded;
  if ($loaded) return;
  $loaded = TRUE;
  if (class_exists('Drupony\\Drupony')) {
    return;
  }

  $autoloader = variable_get('drupony_autoloader');
  if (!isset($autoloader) || !file_exists($autoloader)) {
    $autoloader = _drupony_find_composer_autoloader_dir() . DIRECTORY_SEPARATOR . 'autoload.php';
    variable_set('drupony_autoloader', $autoloader);
  }

  require_once $autoloader;
}

/**
 * Starts looking for a vendor dir inside $min and keeps moving up until it reaches $max,
 * Unless a vendor dir containing autoload.php is found.
 *
 * @param string $min The directory path to start the search in.
 * @param string $max The highest directory level, once reached searching will stop.
 * @return string The directory the autoloader resides in.
 *
 * @throws RuntimeException If no autoloader was found.
 */
function _drupony_find_composer_autoloader_dir($min = __DIR__, $max = DRUPAL_ROOT) {
  $limit = strlen(realpath($max));
  while (($min = realpath($min)) && strlen($min) >= $limit) {
    $dir = $min . DIRECTORY_SEPARATOR . 'vendor';
    if (is_dir($dir) && file_exists($dir . DIRECTORY_SEPARATOR . 'autoload.php') && is_dir($dir . DIRECTORY_SEPARATOR . 'composer')) {
      return $dir;
    }
    $min .= DIRECTORY_SEPARATOR . '..';
  }

  throw new \RuntimeException(sprintf('Composer autoloader could not be found'));
}

/**
 * Get all available drupony caches
 *
 * @return array An array who's keys and values contain the available caches.
 */
function drupony_get_caches() {
  static $caches;
  if (!isset($caches)) {
    $caches = array('container');
    $caches = array_combine($caches, $caches);
  }

  return $caches;
}

function drupony_cache_exists($type) {
  $caches = drupony_get_caches();
  return isset($caches[$type]);
}

function drupony_get_cache_dir($type = 'container') {
  if (!drupony_cache_exists($type)) {
    throw new InvalidArgumentException(sprintf('The cache %s does not exist', $type));
  }
  $dir = variable_get('drupony_cachedir', __DIR__ . DIRECTORY_SEPARATOR . 'cache') . '\\' . $type;
  return preg_replace('/(\\\|\\/)+/', DIRECTORY_SEPARATOR, rtrim(trim($dir), '\\/'));
}

function drupony_clear_cache($type) {
  drupony_autoload();
  $filesystem = new Filesystem();
  $filesystem->remove(drupony_get_cache_dir($type));
}

/**
 * Returns the default Drupony instance.
 *
 * @param bool $debug TRUE:  the container-cache monitors file changes.
 *                    FALSE: the container is cached once and requires a delete before it is refreshed.
 *                    NULL:  use variable 'drupony_debug' if set, FALSE otherwise.
 *                    - @see Symfony\Component\Config\ConfigCache
 * @return Drupony
 */
function drupony_get_wrapper($debug = NULL) {
  static $drupony;
  if (isset($drupony)) {
    return $drupony;
  }
  drupony_autoload();
  $debug = isset($debug) ? $debug : variable_get('drupony_debug', FALSE);
  $cacheDir = drupony_get_cache_dir('container') . DIRECTORY_SEPARATOR . sha1(conf_path(FALSE));
  $drupony = new Drupony($cacheDir, $debug ? Drupony::CACHE_CHANGE : Drupony::CACHE_FULL, 'Main');
  return $drupony;
}
